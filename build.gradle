/*
 * (C) Copyright IBM Corp. 2021
 *
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.sonatype.gradle.plugins:scan-gradle-plugin:2.2.0"
    }
}

allprojects {
    apply plugin: 'scala'
    group = 'org.alvearie.hri.flink'
    version = 'Alpha.Dev'

    apply plugin: "org.sonatype.gradle.plugins.scan"

    ext {
        //TODO: CHANGE ME BACK! (Temp replace with WHFHRI-671-SNAPSHOT branch version for testing)
        //NOTE: Using GitHub package version published on the  WHFHRI-671-SNAPSHOT branch for testing GH Actions changes
        //pipelineCoreVersion = 'develop-SNAPSHOT'
        pipelineCoreVersion = 'develop-SNAPSHOT'
        javaVersion = '1.8'
        flinkVersion = '1.10.0'
        scalaBinaryVersion = '2.12'
        scalaVersion = '2.12.11'
        scalaTestVersion = '3.1.1'
        jacksonVersion = '2.12.0'
        slf4jVersion = '1.7.7'
        log4jVersion = '1.2.17'
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        maven {
            url = uri("https://maven.pkg.github.com/Alvearie/hri-flink-pipeline-core")
            credentials {
               username = findProperty("GITHUB_ACTOR") ?: System.getenv("GITHUB_ACTOR")
               password = findProperty("GITHUB_TOKEN") ?: System.getenv("GITHUB_TOKEN")
            }

        }
        mavenLocal()        //Search for local Maven Repo 1st for ossIndexAudit task; by convention usually mavenCentral() is 1st 
        mavenCentral()
    }

    ext {
        branch = System.getenv('BRANCH_NAME') != null
                ? System.getenv('BRANCH_NAME')
                : getWorkingBranch()

        ossPassword = findProperty("SONATYPE_OSS_PASSWORD") ?: System.getenv("SONATYPE_OSS_PASSWORD")                
    }

    // If not running in Github Actions add 'local' to the version to support local development
    if (System.getenv('BRANCH_NAME') == null || System.getenv('BRANCH_NAME') == "") {
        version = "${branch}-local-SNAPSHOT"
    } else if (System.getenv('ACTIONS_TAG') == null || System.getenv('ACTIONS_TAG') == "") {
        version = "${branch}-SNAPSHOT"
    } else if (System.getenv('ACTIONS_TAG') == "v${version}") {
        version = "${version}"
    } else {
        throw new InvalidUserDataException(String.format("The tag '%s' does not match with the current release version '%s'",System.getenv('ACTIONS_TAG'),"${version}"));
    }

    ossIndexAudit {
        username = 'hribld@us.ibm.com' 
        password = "${ossPassword}"
        allConfigurations = true // if true includes the dependencies in all resolvable configurations. By default is false, meaning only 'compileClasspath', 'runtimeClasspath', 'releaseCompileClasspath' and 'releaseRuntimeClasspath' are considered
        useCache = true // true by default
        cacheExpiration = 'PT86400S' // note: time in seconds (24hrs); 12 hours if omitted. It must follow the Joda Time specification at https://www.javadoc.io/doc/joda-time/joda-time/2.10.4/org/joda/time/Duration.html#parse-java.lang.String-
        colorEnabled = true // if true prints vulnerability description in color. By default is true.
        printBanner = true // if true will print ASCII text banner. By default is true.

        // ossIndexAudit can be configured to exclude vulnerabilities from matching
        // excludeVulnerabilityIds = ['39d74cc8-457a-4e57-89ef-a258420138c5'] // list containing ids of vulnerabilities to be ignored
        // excludeCoordinates = ['commons-fileupload:commons-fileupload:1.3'] // list containing coordinate of components which if vulnerable should be ignored
    }    
}

dependencies {
    // Scala lib
    implementation "org.scala-lang:scala-library:${scalaVersion}"
}

// prevents parent project from producing build output
jar.enabled = false

/**
 * Get the name of the working branch of the project
 *
 * @return Name of the working branch
 */
def getWorkingBranch() {
    // Triple double-quotes for the breaklines
    def workingBranch = """git --git-dir=${rootDir}/.git
                               --work-tree=${rootDir}
                               rev-parse --abbrev-ref HEAD""".execute().text.trim()
    println "Working branch: " + workingBranch
    return workingBranch
}